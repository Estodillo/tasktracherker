/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package tasktrackstudentforms;

import controller.addprojectcontroller;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.projectmodel;

/**
 *
 * @author adamd
 */
public class studentIncomplete extends javax.swing.JPanel {

    private String studentID;
    public studentIncomplete(String studentID) {
        initComponents();
        this.studentID = studentID;
        System.out.println("Student id: " + studentID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        roundpanel1 = new tasktrackswing.roundpanel();
        roundpanel2 = new tasktrackswing.roundpanel();
        roundpanel3 = new tasktrackswing.roundpanel();
        roundpanel4 = new tasktrackswing.roundpanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        roundpanel1.setBackground(new java.awt.Color(153, 255, 255));
        roundpanel1.setText("SCIENCE");
        roundpanel1.setRolloverEnabled(false);
        roundpanel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundpanel1ActionPerformed(evt);
            }
        });

        roundpanel2.setBackground(new java.awt.Color(153, 255, 255));
        roundpanel2.setText("ENGLISH");
        roundpanel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundpanel2ActionPerformed(evt);
            }
        });

        roundpanel3.setBackground(new java.awt.Color(153, 255, 255));
        roundpanel3.setText("FILIPINO");
        roundpanel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundpanel3ActionPerformed(evt);
            }
        });

        roundpanel4.setBackground(new java.awt.Color(153, 255, 255));
        roundpanel4.setText("MATH");
        roundpanel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundpanel4ActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Subject", "Project Name", "Description", "Date", "Deadline"
            }
        ));
        jScrollPane1.setViewportView(studentTable);
        if (studentTable.getColumnModel().getColumnCount() > 0) {
            studentTable.getColumnModel().getColumn(3).setMinWidth(0);
            studentTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            studentTable.getColumnModel().getColumn(3).setMaxWidth(0);
            studentTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roundpanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundpanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundpanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(roundpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(roundpanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roundpanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(roundpanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 51, -1, 400));

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Incompleted Task");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(593, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void roundpanel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundpanel1ActionPerformed
        // TODO add your handling code here:
        try {
            String specificSubject = "Science"; // Replace with the desired subject
            addprojectcontroller controller = new addprojectcontroller();
            List<projectmodel> filteredProjects = controller.getProjectsBySubjectAndStudentId(specificSubject, studentID); // Pass the studentID

            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            model.setRowCount(0);

            if (filteredProjects.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No incomplete tasks for this subject.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (projectmodel project : filteredProjects) {
                    Object[] row = {
                        project.getSubject(),
                        project.getProjectName(),
                        project.getDescription(),
                        project.getDate(),
                        project.getDeadline()
                    };
                    model.addRow(row);
                }
                JOptionPane.showMessageDialog(null, "Data populated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to populate data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    
    }//GEN-LAST:event_roundpanel1ActionPerformed

    private void roundpanel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundpanel2ActionPerformed
        // TODO add your handling code here:
        try {
            String specificSubject = "English"; // Replace with the desired subject
            addprojectcontroller controller = new addprojectcontroller();
            List<projectmodel> filteredProjects = controller.getProjectsBySubjectAndStudentId(specificSubject, studentID); // Pass the studentID

            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            model.setRowCount(0);

            if (filteredProjects.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No incomplete tasks for this subject.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (projectmodel project : filteredProjects) {
                    Object[] row = {
                        project.getSubject(),
                        project.getProjectName(),
                        project.getDescription(),
                        project.getDate(),
                        project.getDeadline()
                    };
                    model.addRow(row);
                }
                JOptionPane.showMessageDialog(null, "Data populated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to populate data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    
    }//GEN-LAST:event_roundpanel2ActionPerformed

    private void roundpanel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundpanel3ActionPerformed
        // TODO add your handling code here:
        try {
            String specificSubject = "Filipino"; // Replace with the desired subject
            addprojectcontroller controller = new addprojectcontroller();
            List<projectmodel> filteredProjects = controller.getProjectsBySubjectAndStudentId(specificSubject, studentID); // Pass the studentID

            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            model.setRowCount(0);

            if (filteredProjects.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No incomplete tasks for this subject.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (projectmodel project : filteredProjects) {
                    Object[] row = {
                        project.getSubject(),
                        project.getProjectName(),
                        project.getDescription(),
                        project.getDate(),
                        project.getDeadline()
                    };
                    model.addRow(row);
                }
                JOptionPane.showMessageDialog(null, "Data populated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to populate data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    
    }//GEN-LAST:event_roundpanel3ActionPerformed

    private void roundpanel4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundpanel4ActionPerformed
        // TODO add your handling code here:
        try {
            String specificSubject = "Math"; // Replace with the desired subject
            addprojectcontroller controller = new addprojectcontroller();
            List<projectmodel> filteredProjects = controller.getProjectsBySubjectAndStudentId(specificSubject, studentID); // Pass the studentID

            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            model.setRowCount(0);

            if (filteredProjects.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No incomplete tasks for this subject.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (projectmodel project : filteredProjects) {
                    Object[] row = {
                        project.getSubject(),
                        project.getProjectName(),
                        project.getDescription(),
                        project.getDate(),
                        project.getDeadline()
                    };
                    model.addRow(row);
                }
                JOptionPane.showMessageDialog(null, "Data populated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to populate data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    
    }//GEN-LAST:event_roundpanel4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private tasktrackswing.roundpanel roundpanel1;
    private tasktrackswing.roundpanel roundpanel2;
    private tasktrackswing.roundpanel roundpanel3;
    private tasktrackswing.roundpanel roundpanel4;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
